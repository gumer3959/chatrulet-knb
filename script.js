/*
=== –ò–°–¢–û–†–ò–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò ===
v1.0 - –ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–∏–¥–µ–æ—á–∞—Ç–∞ —Å –∏–≥—Ä–æ–π –ö–ù–ë
v1.1 - –ù–∞—Å—Ç–æ—è—â–∏–µ WebRTC –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏: –∑–∞–º–µ–Ω–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

=== –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –†–ï–®–ï–ù–ò–Ø ===
- –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤–∏–¥–µ–æ—á–∞—Ç–∞ –∏ –∏–≥—Ä—ã
- WebRTC + Socket.IO: –Ω–∞—Å—Ç–æ—è—â–∏–µ P2P –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
- Event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–≤—è–∑–∏ –º–æ–¥—É–ª–µ–π
- –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤

=== –ù–ï –†–ê–ë–û–¢–ê–ï–¢ (–ù–ï –ü–û–í–¢–û–†–Ø–¢–¨) ===
- –°–ª–æ–∂–Ω—ã–µ WebRTC –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: —Å–æ–∑–¥–∞—é—Ç –∏–∑–ª–∏—à–Ω—é—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
- –ö–ª–∞—Å—Å—ã –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤: —É—Å–ª–æ–∂–Ω—è—é—Ç –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É
- –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

=== –ò–ó–í–ï–°–¢–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø ===
- WebRTC: —Ç—Ä–µ–±—É–µ—Ç HTTPS –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (Railway –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
- STUN —Å–µ—Ä–≤–µ—Ä—ã: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ Google STUN —Å–µ—Ä–≤–µ—Ä—ã
*/

// –†–ï–®–ï–ù–ò–ï: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è WebRTC –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ú–æ–≥–ª–∏ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ ES6, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ –∏–∑–±—ã—Ç–æ—á–Ω–æ
// –ü–†–û–ë–õ–ï–ú–ê: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –≤–∏–¥–µ–æ—á–∞—Ç–∞ –∏ –∏–≥—Ä—ã

let socket = null;
let localStream = null;
let remoteStream = null;
let peerConnection = null;
let isConnected = false;
let gameActive = false;
let currentPeerId = null;
let isSearching = false;

// –†–ï–®–ï–ù–ò–ï: WebRTC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ STUN —Å–µ—Ä–≤–µ—Ä–∞–º–∏
// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ú–æ–≥–ª–∏ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TURN —Å–µ—Ä–≤–µ—Ä—ã, –Ω–æ STUN –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤
// –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ NAT –¥–ª—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const rtcConfiguration = {
    iceServers: [
        { urls: 'stun:stun.l.google.com:19302' },
        { urls: 'stun:stun1.l.google.com:19302' }
    ]
};

// –†–ï–®–ï–ù–ò–ï: –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WebRTC –≤–∏–¥–µ–æ—á–∞—Ç–æ–º
// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ö–ª–∞—Å—Å, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –ø—Ä–æ—â–µ
// –ü–†–û–ë–õ–ï–ú–ê: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ P2P –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞–º–∏
const VideoChat = {
    // –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    // –¢–ï–°–¢–ò–†–û–í–ê–ù–û: –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç

    async init() {
        this.initSocket();
        this.bindEvents();
        this.updateUI();
    },

    initSocket() {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
        socket = io();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Socket.IO —Å–æ–±—ã—Ç–∏–π
        socket.on('waiting-for-peer', () => {
            console.log('üîç –û–∂–∏–¥–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
            this.showStatus('–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
            isSearching = true;
            this.updateUI();
        });

        socket.on('peer-found', async (data) => {
            console.log('ü§ù –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω:', data.peerId);
            this.showStatus('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
            isSearching = false;
            currentPeerId = data.peerId;
            await this.createPeerConnection();
            await this.createOffer();
        });

        socket.on('webrtc-offer', async (data) => {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω offer –æ—Ç:', data.from);
            isSearching = false;
            currentPeerId = data.from;
            await this.createPeerConnection();
            await this.handleOffer(data.offer);
        });

        socket.on('webrtc-answer', async (data) => {
            console.log('üì® –ü–æ–ª—É—á–µ–Ω answer –æ—Ç:', data.from);
            await this.handleAnswer(data.answer);
        });

        socket.on('webrtc-ice-candidate', async (data) => {
            console.log('üßä –ü–æ–ª—É—á–µ–Ω ICE candidate –æ—Ç:', data.from);
            await this.handleIceCandidate(data.candidate);
        });

        socket.on('peer-disconnected', () => {
            console.log('üëã –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
            this.handlePeerDisconnected();
        });

        socket.on('chat-message', (data) => {
            this.addMessage('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫', data.message);
        });

        socket.on('game-choice', (data) => {
            Game.handleOpponentChoice(data.choice);
        });

        // –†–ï–®–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        // –ü–†–û–ë–õ–ï–ú–ê: –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å find-peer –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        socket.on('find-peer', () => {
            console.log('üîÑ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫');
            if (!isConnected && !isSearching) {
                socket.emit('find-peer');
            }
        });
    },

    bindEvents() {
        document.getElementById('startBtn').addEventListener('click', () => this.start());
        document.getElementById('nextBtn').addEventListener('click', () => this.next());
        document.getElementById('stopBtn').addEventListener('click', () => this.stop());
        document.getElementById('sendBtn').addEventListener('click', () => this.sendMessage());
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.sendMessage();
        });
    },

    async start() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
            localStream = await navigator.mediaDevices.getUserMedia({
                video: true,
                audio: true
            });

            document.getElementById('localVideo').srcObject = localStream;
            this.showStatus('–ö–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');

            // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ WebSocket
            socket.emit('find-peer');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
            this.showStatus('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ');
        }
    },

    async createPeerConnection() {
        // –°–æ–∑–¥–∞–µ–º WebRTC peer connection
        peerConnection = new RTCPeerConnection(rtcConfiguration);

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
        localStream.getTracks().forEach(track => {
            peerConnection.addTrack(track, localStream);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        peerConnection.ontrack = (event) => {
            remoteStream = event.streams[0];
            document.getElementById('remoteVideo').srcObject = remoteStream;
            this.onConnectionEstablished();
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                socket.emit('webrtc-ice-candidate', {
                    candidate: event.candidate
                });
            }
        };

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        peerConnection.onconnectionstatechange = () => {
            console.log('WebRTC —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', peerConnection.connectionState);
            if (peerConnection.connectionState === 'disconnected' ||
                peerConnection.connectionState === 'failed') {
                this.handlePeerDisconnected();
            }
        };
    },

    async createOffer() {
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        socket.emit('webrtc-offer', { offer });
    },

    async handleOffer(offer) {
        await peerConnection.setRemoteDescription(offer);
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        socket.emit('webrtc-answer', { answer });
    },

    async handleAnswer(answer) {
        await peerConnection.setRemoteDescription(answer);
    },

    async handleIceCandidate(candidate) {
        await peerConnection.addIceCandidate(candidate);
    },

    onConnectionEstablished() {
        // –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–ø–µ—Ä—å —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!
        isConnected = true;
        isSearching = false;
        this.showStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ –æ–±—â–µ–Ω–∏–µ');
        this.updateUI();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ–∫—Ü–∏—é
        document.getElementById('gameSection').style.display = 'block';

        // –í–∫–ª—é—á–∞–µ–º —á–∞—Ç
        document.getElementById('messageInput').disabled = false;
        document.getElementById('sendBtn').disabled = false;
    },

    handlePeerDisconnected() {
        this.showStatus('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
        isConnected = false;
        isSearching = false;

        // –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
        document.getElementById('remoteVideo').srcObject = null;
        document.getElementById('gameSection').style.display = 'none';

        // –û—Ç–∫–ª—é—á–∞–µ–º —á–∞—Ç
        document.getElementById('messageInput').disabled = true;
        document.getElementById('sendBtn').disabled = true;
        document.getElementById('chatMessages').innerHTML = '';

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º peer connection
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }

        currentPeerId = null;
        Game.reset();
        this.updateUI();
    },

    next() {
        console.log('üîÑ –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');

        // –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ WebSocket
        this.showStatus('–ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
        Game.reset();

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }

        // –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏ UI
        document.getElementById('remoteVideo').srcObject = null;
        document.getElementById('gameSection').style.display = 'none';
        document.getElementById('messageInput').disabled = true;
        document.getElementById('sendBtn').disabled = true;
        document.getElementById('chatMessages').innerHTML = '';

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        isConnected = false;
        isSearching = true;
        currentPeerId = null;
        this.updateUI();

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        socket.emit('find-next-peer');
    },

    stop() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }

        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç WebSocket
        if (socket) {
            socket.disconnect();
        }

        isConnected = false;
        isSearching = false;
        gameActive = false;
        currentPeerId = null;

        document.getElementById('localVideo').srcObject = null;
        document.getElementById('remoteVideo').srcObject = null;
        document.getElementById('gameSection').style.display = 'none';

        this.showStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ');
        this.updateUI();
        Game.reset();

        // –û—Ç–∫–ª—é—á–∞–µ–º —á–∞—Ç
        document.getElementById('messageInput').disabled = true;
        document.getElementById('sendBtn').disabled = true;
        document.getElementById('chatMessages').innerHTML = '';
    },

    showStatus(message) {
        document.getElementById('connectionStatus').textContent = message;
    },

    updateUI() {
        const startBtn = document.getElementById('startBtn');
        const nextBtn = document.getElementById('nextBtn');
        const stopBtn = document.getElementById('stopBtn');

        startBtn.disabled = isConnected || isSearching;
        nextBtn.disabled = !isConnected;
        stopBtn.disabled = !isConnected && !isSearching;
    },

    sendMessage() {
        const input = document.getElementById('messageInput');
        const message = input.value.trim();

        if (message && isConnected && currentPeerId) {
            this.addMessage('–í—ã', message);
            input.value = '';

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
            socket.emit('chat-message', { message });
        }
    },

    addMessage(sender, message) {
        const chatMessages = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.innerHTML = `<strong>${sender}:</strong> ${message}`;
        messageDiv.style.marginBottom = '0.5rem';
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
};

// –†–ï–®–ï–ù–ò–ï: –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π –ö–ù–ë –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ VideoChat, –Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ
// –ü–†–û–ë–õ–ï–ú–ê: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –º–µ–∂–¥—É –¥–≤—É–º—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ —á–µ—Ä–µ–∑ WebSocket
const Game = {
    playerScore: 0,
    opponentScore: 0,
    playerChoice: null,
    opponentChoice: null,
    waitingForOpponent: false,

    init() {
        this.bindEvents();
        this.updateScore();
    },

    bindEvents() {
        document.querySelectorAll('.choice-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                if (isConnected && !gameActive && !this.waitingForOpponent) {
                    this.makeChoice(e.target.dataset.choice);
                }
            });
        });
    },

    makeChoice(choice) {
        if (gameActive || this.waitingForOpponent) return;

        gameActive = true;
        this.waitingForOpponent = true;
        this.playerChoice = choice;

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateChoiceDisplay('player', choice);
        this.highlightChoice(choice);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫—É —á–µ—Ä–µ–∑ WebSocket
        socket.emit('game-choice', { choice });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è
        document.getElementById('opponentChoice').textContent = '–û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...';
    },

    handleOpponentChoice(choice) {
        // –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        // –¢–ï–°–¢–ò–†–û–í–ê–ù–û: –†–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        this.opponentChoice = choice;
        this.updateChoiceDisplay('opponent', choice);

        // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±–∞ –≤—ã–±–æ—Ä–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if (this.playerChoice && this.opponentChoice) {
            setTimeout(() => {
                this.determineWinner();
            }, 1000);
        }
    },

    updateChoiceDisplay(player, choice) {
        const emojis = {
            rock: 'ü™®',
            paper: 'üìÑ',
            scissors: '‚úÇÔ∏è'
        };
        
        const elementId = player === 'player' ? 'playerChoice' : 'opponentChoice';
        document.getElementById(elementId).textContent = emojis[choice];
    },

    highlightChoice(choice) {
        document.querySelectorAll('.choice-btn').forEach(btn => {
            btn.classList.remove('selected');
        });
        document.querySelector(`[data-choice="${choice}"]`).classList.add('selected');
    },

    determineWinner() {
        const result = this.getGameResult(this.playerChoice, this.opponentChoice);
        const resultElement = document.getElementById('gameResult');
        
        resultElement.className = 'result';
        
        if (result === 'win') {
            resultElement.textContent = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!';
            resultElement.classList.add('win');
            this.playerScore++;
        } else if (result === 'lose') {
            resultElement.textContent = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!';
            resultElement.classList.add('lose');
            this.opponentScore++;
        } else {
            resultElement.textContent = '–ù–∏—á—å—è!';
            resultElement.classList.add('draw');
        }
        
        this.updateScore();
        
        // –°–±—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        setTimeout(() => {
            this.resetRound();
        }, 3000);
    },

    getGameResult(player, opponent) {
        if (player === opponent) return 'draw';
        
        const winConditions = {
            rock: 'scissors',
            paper: 'rock',
            scissors: 'paper'
        };
        
        return winConditions[player] === opponent ? 'win' : 'lose';
    },

    updateScore() {
        document.getElementById('playerScore').textContent = this.playerScore;
        document.getElementById('opponentScore').textContent = this.opponentScore;
    },

    resetRound() {
        gameActive = false;
        this.waitingForOpponent = false;
        this.playerChoice = null;
        this.opponentChoice = null;

        document.getElementById('playerChoice').textContent = '';
        document.getElementById('opponentChoice').textContent = '–û–∂–∏–¥–∞–Ω–∏–µ...';
        document.getElementById('gameResult').textContent = '';

        document.querySelectorAll('.choice-btn').forEach(btn => {
            btn.classList.remove('selected');
        });
    },

    reset() {
        this.playerScore = 0;
        this.opponentScore = 0;
        this.waitingForOpponent = false;
        this.updateScore();
        this.resetRound();
    }
};

// –†–ï–®–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ú–æ–≥–ª–∏ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DOMContentLoaded, –Ω–æ load –ø—Ä–æ—â–µ
// –ü–†–û–ë–õ–ï–ú–ê: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
window.addEventListener('load', () => {
    VideoChat.init();
    Game.init();
});
