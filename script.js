/* 
=== –ò–°–¢–û–†–ò–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò ===
v1.0 - –ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–∏–¥–µ–æ—á–∞—Ç–∞ —Å –∏–≥—Ä–æ–π –ö–ù–ë

=== –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –†–ï–®–ï–ù–ò–Ø ===
- –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤–∏–¥–µ–æ—á–∞—Ç–∞ –∏ –∏–≥—Ä—ã
- Event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–≤—è–∑–∏ –º–æ–¥—É–ª–µ–π
- –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤

=== –ù–ï –†–ê–ë–û–¢–ê–ï–¢ (–ù–ï –ü–û–í–¢–û–†–Ø–¢–¨) ===
- –°–ª–æ–∂–Ω—ã–µ WebRTC –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: —Å–æ–∑–¥–∞—é—Ç –∏–∑–ª–∏—à–Ω—é—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
- –ö–ª–∞—Å—Å—ã –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤: —É—Å–ª–æ–∂–Ω—è—é—Ç –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É

=== –ò–ó–í–ï–°–¢–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø ===
- WebRTC: —Ç—Ä–µ–±—É–µ—Ç HTTPS –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
- –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–∞—Ç—á–∏–Ω–≥–∞
*/

// –†–ï–®–ï–ù–ò–ï: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ú–æ–≥–ª–∏ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ ES6, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ –∏–∑–±—ã—Ç–æ—á–Ω–æ
// –ü–†–û–ë–õ–ï–ú–ê: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤–∏–¥–µ–æ—á–∞—Ç–∞ –∏ –∏–≥—Ä—ã

let localStream = null;
let isConnected = false;
let gameActive = false;

// –†–ï–®–ï–ù–ò–ï: –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ—á–∞—Ç–æ–º
// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ö–ª–∞—Å—Å, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –ø—Ä–æ—â–µ
const VideoChat = {
    // –í–ù–ò–ú–ê–ù–ò–ï: –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–µ–Ω —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    // –¢–ï–°–¢–ò–†–û–í–ê–ù–û: –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä–æ–π
    
    async init() {
        this.bindEvents();
        this.updateUI();
    },

    bindEvents() {
        document.getElementById('startBtn').addEventListener('click', () => this.start());
        document.getElementById('nextBtn').addEventListener('click', () => this.next());
        document.getElementById('stopBtn').addEventListener('click', () => this.stop());
        document.getElementById('sendBtn').addEventListener('click', () => this.sendMessage());
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.sendMessage();
        });
    },

    async start() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
            localStream = await navigator.mediaDevices.getUserMedia({ 
                video: true, 
                audio: true 
            });
            
            document.getElementById('localVideo').srcObject = localStream;
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
            this.simulateConnection();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error);
            this.showStatus('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ');
        }
    },

    simulateConnection() {
        // –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω WebRTC peer connection
        isConnected = true;
        this.showStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É');
        this.updateUI();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ–∫—Ü–∏—é
        document.getElementById('gameSection').style.display = 'block';
        
        // –í–∫–ª—é—á–∞–µ–º —á–∞—Ç
        document.getElementById('messageInput').disabled = false;
        document.getElementById('sendBtn').disabled = false;
    },

    next() {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        this.showStatus('–ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...');
        Game.reset();
        
        setTimeout(() => {
            this.simulateConnection();
        }, 2000);
    },

    stop() {
        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
        }
        
        isConnected = false;
        gameActive = false;
        
        document.getElementById('localVideo').srcObject = null;
        document.getElementById('remoteVideo').srcObject = null;
        document.getElementById('gameSection').style.display = 'none';
        
        this.showStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ');
        this.updateUI();
        Game.reset();
        
        // –û—Ç–∫–ª—é—á–∞–µ–º —á–∞—Ç
        document.getElementById('messageInput').disabled = true;
        document.getElementById('sendBtn').disabled = true;
        document.getElementById('chatMessages').innerHTML = '';
    },

    showStatus(message) {
        document.getElementById('connectionStatus').textContent = message;
    },

    updateUI() {
        const startBtn = document.getElementById('startBtn');
        const nextBtn = document.getElementById('nextBtn');
        const stopBtn = document.getElementById('stopBtn');
        
        startBtn.disabled = isConnected;
        nextBtn.disabled = !isConnected;
        stopBtn.disabled = !isConnected;
    },

    sendMessage() {
        const input = document.getElementById('messageInput');
        const message = input.value.trim();
        
        if (message && isConnected) {
            this.addMessage('–í—ã', message);
            input.value = '';
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            setTimeout(() => {
                const responses = [
                    '–ü—Ä–∏–≤–µ—Ç!', '–ö–∞–∫ –¥–µ–ª–∞?', '–î–∞–≤–∞–π –∏–≥—Ä–∞—Ç—å!', 
                    '–•–æ—Ä–æ—à–∞—è –∏–≥—Ä–∞!', '–ï—â–µ —Ä–∞–∑?', '–ö—Ä—É—Ç–æ!'
                ];
                const randomResponse = responses[Math.floor(Math.random() * responses.length)];
                this.addMessage('–°–æ–±–µ—Å–µ–¥–Ω–∏–∫', randomResponse);
            }, 1000 + Math.random() * 2000);
        }
    },

    addMessage(sender, message) {
        const chatMessages = document.getElementById('chatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.innerHTML = `<strong>${sender}:</strong> ${message}`;
        messageDiv.style.marginBottom = '0.5rem';
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
};

// –†–ï–®–ï–ù–ò–ï: –û–±—ä–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π –ö–ù–ë
// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ VideoChat, –Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ
const Game = {
    playerScore: 0,
    opponentScore: 0,
    playerChoice: null,
    opponentChoice: null,
    
    init() {
        this.bindEvents();
        this.updateScore();
    },

    bindEvents() {
        document.querySelectorAll('.choice-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                if (isConnected && !gameActive) {
                    this.makeChoice(e.target.dataset.choice);
                }
            });
        });
    },

    makeChoice(choice) {
        if (gameActive) return;
        
        gameActive = true;
        this.playerChoice = choice;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateChoiceDisplay('player', choice);
        this.highlightChoice(choice);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        setTimeout(() => {
            this.simulateOpponentChoice();
        }, 1000 + Math.random() * 2000);
    },

    simulateOpponentChoice() {
        const choices = ['rock', 'paper', 'scissors'];
        this.opponentChoice = choices[Math.floor(Math.random() * choices.length)];
        
        this.updateChoiceDisplay('opponent', this.opponentChoice);
        
        setTimeout(() => {
            this.determineWinner();
        }, 1000);
    },

    updateChoiceDisplay(player, choice) {
        const emojis = {
            rock: 'ü™®',
            paper: 'üìÑ',
            scissors: '‚úÇÔ∏è'
        };
        
        const elementId = player === 'player' ? 'playerChoice' : 'opponentChoice';
        document.getElementById(elementId).textContent = emojis[choice];
    },

    highlightChoice(choice) {
        document.querySelectorAll('.choice-btn').forEach(btn => {
            btn.classList.remove('selected');
        });
        document.querySelector(`[data-choice="${choice}"]`).classList.add('selected');
    },

    determineWinner() {
        const result = this.getGameResult(this.playerChoice, this.opponentChoice);
        const resultElement = document.getElementById('gameResult');
        
        resultElement.className = 'result';
        
        if (result === 'win') {
            resultElement.textContent = '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!';
            resultElement.classList.add('win');
            this.playerScore++;
        } else if (result === 'lose') {
            resultElement.textContent = '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!';
            resultElement.classList.add('lose');
            this.opponentScore++;
        } else {
            resultElement.textContent = '–ù–∏—á—å—è!';
            resultElement.classList.add('draw');
        }
        
        this.updateScore();
        
        // –°–±—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
        setTimeout(() => {
            this.resetRound();
        }, 3000);
    },

    getGameResult(player, opponent) {
        if (player === opponent) return 'draw';
        
        const winConditions = {
            rock: 'scissors',
            paper: 'rock',
            scissors: 'paper'
        };
        
        return winConditions[player] === opponent ? 'win' : 'lose';
    },

    updateScore() {
        document.getElementById('playerScore').textContent = this.playerScore;
        document.getElementById('opponentScore').textContent = this.opponentScore;
    },

    resetRound() {
        gameActive = false;
        this.playerChoice = null;
        this.opponentChoice = null;
        
        document.getElementById('playerChoice').textContent = '';
        document.getElementById('opponentChoice').textContent = '–û–∂–∏–¥–∞–Ω–∏–µ...';
        document.getElementById('gameResult').textContent = '';
        
        document.querySelectorAll('.choice-btn').forEach(btn => {
            btn.classList.remove('selected');
        });
    },

    reset() {
        this.playerScore = 0;
        this.opponentScore = 0;
        this.updateScore();
        this.resetRound();
    }
};

// –†–ï–®–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê: –ú–æ–≥–ª–∏ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DOMContentLoaded, –Ω–æ load –ø—Ä–æ—â–µ
// –ü–†–û–ë–õ–ï–ú–ê: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
window.addEventListener('load', () => {
    VideoChat.init();
    Game.init();
});
